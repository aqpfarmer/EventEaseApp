@page "/register"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using EventEaseApp.Models
@inject EventEaseApp.Services.EventService EventService
@inject NavigationManager Navigation

<h3 style="color: darkmagenta;">Register For Event</h3>
<EditForm Model="attendee" OnValidSubmit="HandleRegister" style="width:50vw; height:70vh; margin:0 auto; padding-bottom:60px; overflow-y:auto;">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label class="form-label">Name</label>
        <InputText class="form-control" @bind-Value="attendee.Name" />
        <ValidationMessage For="() => attendee.Name" />
    </div>
    <div class="mb-3">
        <label class="form-label">Address</label>
        <InputText class="form-control" @bind-Value="attendee.Address" />
        <ValidationMessage For="() => attendee.Address" />
    </div>
    <div class="mb-3">
        <label class="form-label">Phone</label>
        <InputText class="form-control" @bind-Value="attendee.Phone" />
        <ValidationMessage For="() => attendee.Phone" />
    </div>
    <div class="mb-3">
        <label class="form-label">Email</label>
        <InputText class="form-control" @bind-Value="attendee.Email" />
        <ValidationMessage For="() => attendee.Email" />
    </div>
    <div class="mb-3">
        <label class="form-label">Country</label>
        <InputText class="form-control" @bind-Value="attendee.Country" />
        <ValidationMessage For="() => attendee.Country" />
    </div>
    <div class="mb-3">
        <label class="form-label">Events You can control-click multiple events</label>
        <select multiple class="form-control" @onchange="OnEventSelectionChanged">
            @foreach (var evt in EventService.Events)
            {
                <option value="@evt.Id" selected="@attendee.EventIds.Contains(evt.Id)">@evt.Name (@evt.Date.ToString("MMM dd, yyyy"))</option>
            }
        </select>
        <ValidationMessage For="() => attendee.EventIds" />
    </div>
    <button type="submit" class="btn btn-success">Register</button>
</EditForm>

@if (errorMessage != null)
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}
@if (successMessage != null)
{
    <div class="alert alert-success mt-3">@successMessage</div>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public int? eventId { get; set; }
    private Attendee attendee = new Attendee {
        Name = string.Empty,
        Address = string.Empty,
        Phone = string.Empty,
        Email = string.Empty,
        Country = string.Empty,
        EventIds = Array.Empty<int>()
    };
    private string? successMessage;
    private string? errorMessage;

    protected override void OnInitialized()
    {
        if (eventId.HasValue && eventId.Value > 0)
        {
            attendee.EventIds = new int[] { eventId.Value };
        }
    }

    private void HandleRegister()
    {
        // Check for duplicate registration
        var alreadyRegisteredEvents = attendee.EventIds.Where(eventId =>
            EventService.GetAttendeesForEvent(eventId)
                .Any(a => a.Email.Equals(attendee.Email, System.StringComparison.OrdinalIgnoreCase))
        ).ToList();

        if (alreadyRegisteredEvents.Any())
        {
            var eventNames = EventService.Events.Where(e => alreadyRegisteredEvents.Contains(e.Id)).Select(e => e.Name);
            errorMessage = $"A person with that email is already registered for this event: {string.Join(", ", eventNames)}";
            successMessage = null;
            return;
        }

        EventService.RegisterAttendee(attendee);
        var registeredEventNames = EventService.Events.Where(e => attendee.EventIds.Contains(e.Id)).Select(e => e.Name);
        successMessage = $"Thank you, {attendee.Name}, for registering for: {string.Join(", ", registeredEventNames)}!";
        errorMessage = null;
        attendee = new Attendee {
            Name = string.Empty,
            Address = string.Empty,
            Phone = string.Empty,
            Email = string.Empty,
            Country = string.Empty,
            EventIds = Array.Empty<int>()
        };
    }

    private void OnEventSelectionChanged(ChangeEventArgs e)
    {
        var selectedOptions = e.Value as IEnumerable<string> ?? new List<string>();
        attendee.EventIds = selectedOptions.Select(int.Parse).ToArray();
    }
}
