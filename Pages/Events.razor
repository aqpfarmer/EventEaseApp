@page "/events"
@using EventEaseApp.Models
@using EventEaseApp.Components
@using EventEaseApp.Services
@inject EventService EventService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject HttpClient Http
@inject IJSRuntime JS

<h3>Events List</h3>
<div>
    <button class="btn btn-outline-secondary btn-sm me-2" @onclick="PrevPage" disabled="@(currentPage == 1)">Prev</button>
    <span>Page @currentPage of @totalPages</span>
    <button class="btn btn-outline-secondary btn-sm ms-2" @onclick="NextPage" disabled="@(currentPage == totalPages)">Next</button>
</div>
<ul class="list-group">
    @foreach (var evt in pagedEvents)
    {
        <li class="list-group-item">
            <img src="@evt.ImageUrl" alt="@evt.Name thumbnail" width="200" height="100" style="object-fit:cover; margin-right:10px; vertical-align:middle;" />
            <strong>@evt.Name (@evt.Date.ToString("MMM dd, yyyy"))</strong><br />
            <span style="padding:5px;">@evt.Location</span><br />
            <span style="padding:5px;">@evt.Description</span>
            <div class="mt-2 ms-3">
                <b>Attendees:</b>
                @if (EventService.GetAttendeesForEvent(evt.Id).Any())
                {
                    <ul>
                        @foreach (var attendee in EventService.GetAttendeesForEvent(evt.Id))
                        {
                            <li>@attendee.Name (@attendee.Email)</li>
                        }
                    </ul>
                }
                else
                {
                    <span class="text-muted">No attendees registered.</span>
                }
            </div>
            <button class="btn btn-sm btn-primary me-2" @onclick="() => EditEvent(evt)">Edit</button>
            <button class="btn btn-sm btn-danger" @onclick="() => DeleteEvent(evt.Id)">Delete</button>
        </li>
    }
</ul>

<a id="edit-section"></a>
@if (editingEvent != null)
{
    <div class="mt-4">
        <h4>Edit Event</h4>
        <EditForm Model="editingEvent" OnValidSubmit="HandleEditEvent">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
                <label class="form-label">Name</label>
                <InputText class="form-control" @bind-Value="editingEvent.Name" />
            </div>
            <div class="mb-3">
                <label class="form-label">Date</label>
                <InputDate class="form-control" @bind-Value="editingEvent.Date" />
            </div>
            <div class="mb-3">
                <label class="form-label">Location</label>
                <InputText class="form-control" @bind-Value="editingEvent.Location" />
            </div>
            <div class="mb-3">
                <label class="form-label">Description</label>
                <InputTextArea class="form-control" @bind-Value="editingEvent.Description" />
            </div>
            <div class="mb-3">
                <label class="form-label">Image URL</label>
                <InputText class="form-control" @bind-Value="editingEvent.ImageUrl" />
            </div>
            <button type="submit" class="btn btn-success">Save Changes</button>
            <button type="button" class="btn btn-secondary ms-2" @onclick="CancelEdit">Cancel</button>
        </EditForm>
    </div>
}

@code {
    private int currentPage = 1;
    private int pageSize = 3;
    private int totalPages => (int)Math.Ceiling((double)EventService.Events.Count / pageSize);
    private List<Event> pagedEvents => EventService.Events.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();

    private void PrevPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
        }
    }
    private Event? editingEvent;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var loaded = await LocalStorage.GetItemAsync<List<Event>>("events");
        if (loaded == null || loaded.Count == 0)
        {
            var response = await Http.GetAsync("data/events.json");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var events = System.Text.Json.JsonSerializer.Deserialize<List<Event>>(json);
                if (events != null)
                {
                    await LocalStorage.SetItemAsync("events", events);
                    await EventService.LoadEventsAsync();
                }
            }
        }
        else
        {
            await EventService.LoadEventsAsync();
        }
    }

    private async Task EditEvent(Event evt)
    {
        editingEvent = new Event {
            Id = evt.Id,
            Name = evt.Name,
            Location = evt.Location,
            Description = evt.Description,
            ImageUrl = evt.ImageUrl,
            Date = evt.Date
        };
        await JS.InvokeVoidAsync("scrollToEditSection");
    }

    private async void HandleEditEvent()
    {
        try
        {
            await EventService.UpdateEventAsync(editingEvent!);
            editingEvent = null;
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating event: {ex.Message}";
        }
    }

    private void CancelEdit()
    {
        editingEvent = null;
        errorMessage = null;
    }

    private async void DeleteEvent(int eventId)
    {
        try
        {
            await EventService.DeleteEventAsync(eventId);
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting event: {ex.Message}";
        }
    }
}
